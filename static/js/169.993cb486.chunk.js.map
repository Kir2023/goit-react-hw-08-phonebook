{"version":3,"file":"static/js/169.993cb486.chunk.js","mappings":"4PACA,EAA4B,6BAA5B,EAAqE,6BAArE,EAA+G,8BAA/G,EAAwJ,4B,SCqExJ,EA3DkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAwBA,OACE,gBAAKC,UAAWC,EAAhB,UACE,kBAAMC,SAxBO,SAAAC,GACfA,EAAEC,iBAEF,IAGMC,EAAW,CACfC,MAJYH,EAAEI,cAAcC,SAASC,UAAUC,MAK/CC,SAJeR,EAAEI,cAAcC,SAASI,aAAaF,OAOvDX,GAAa,GACbJ,GAASkB,EAAAA,EAAAA,IAAWR,IACjBS,MAAK,WACJf,GAAa,EACd,IACAgB,OAAM,SAAAC,GACLjB,GAAa,GACbkB,IAAAA,OAAAA,QAAA,kCAAmDD,GACpD,GACJ,EAIG,WACE,8BACE,cAAGhB,UAAWC,EAAd,SAA6B,YAC7B,kBACED,UAAWC,EACXiB,KAAK,QACLC,YAAY,cACZC,UAAQ,EACRC,KAAK,kBAGT,8BACE,cAAGrB,UAAWC,EAAd,SAA6B,eAC7B,kBACED,UAAWC,EACXiB,KAAK,WACLC,YAAY,iBACZC,UAAQ,EACRC,KAAK,eACLC,UAAW,QAGf,mBACA,mBAAQJ,KAAK,SAASlB,UAAWC,EAAjC,SACGH,GAAY,SAACyB,EAAA,EAAD,IAAgB,gBAKtC,C","sources":["webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginPage_loginForm__fRcAC\",\"loginText\":\"LoginPage_loginText__C-SAb\",\"loginInput\":\"LoginPage_loginInput__eewYx\",\"loginBtn\":\"LoginPage_loginBtn__8kGss\"};","import Notiflix from 'notiflix';\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { loginThunk } from 'redux/auth.reducer';\n\nimport BtnLoader from 'components/BtnLoader/BtnLoader';\n\nimport css from './LoginPage.module.css';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const email = e.currentTarget.elements.userEmail.value;\n    const password = e.currentTarget.elements.userPassword.value;\n\n    const formData = {\n      email,\n      password,\n    };\n\n    setIsLoading(true);\n    dispatch(loginThunk(formData))\n      .then(() => {\n        setIsLoading(false);\n      })\n      .catch(error => {\n        setIsLoading(false);\n        Notiflix.Notify.failure(`Error deleting contact: ${error}`);\n      });\n  };\n\n  return (\n    <div className={css.loginForm}>\n      <form onSubmit={onSubmit}>\n        <label>\n          <p className={css.loginText}>Email:</p>\n          <input\n            className={css.loginInput}\n            type=\"email\"\n            placeholder=\"Enter email\"\n            required\n            name=\"userEmail\"\n          />\n        </label>\n        <label>\n          <p className={css.loginText}>Password:</p>\n          <input\n            className={css.loginInput}\n            type=\"password\"\n            placeholder=\"Enter password\"\n            required\n            name=\"userPassword\"\n            minLength={7}\n          />\n        </label>\n        <br />\n        <button type=\"submit\" className={css.loginBtn}>\n          {isLoading ? <BtnLoader /> : 'Sign in'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["dispatch","useDispatch","useState","isLoading","setIsLoading","className","css","onSubmit","e","preventDefault","formData","email","currentTarget","elements","userEmail","value","password","userPassword","loginThunk","then","catch","error","Notiflix","type","placeholder","required","name","minLength","BtnLoader"],"sourceRoot":""}